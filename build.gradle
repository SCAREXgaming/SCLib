buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'co.riiid:gradle-github-plugin:0.4.2'
    }
}

plugins {
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.32"
    id "fr.scarex.fcgp" version "1.0.2"
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'
apply plugin: 'co.riiid.gradle'

// Getting build number with git
ext.buildnumber = 0
try {
    ext.buildnumber = "git rev-list --count HEAD".execute().text.trim()
} catch (all) {}

group = "com.github.SCAREXgaming"
archivesBaseName = "SCLib"
version = "${mc_version}-${mod_version}.${buildnumber}"
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "eclipse"
    mappings = mappings_date
    
    project.ext.getProperties().each { k, v ->
        replace "@${k.toUpperCase()}@", v
    }
    
    replace "@DEBUG@", "couscous"
    replaceIn "SCLib.java"
}

sourceSets {
    test {
        java {
            srcDirs += "src/test/java"
            srcDirs += "src/test/resources"
        }
    }
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


// Dependencies
repositories {
    mavenCentral()
    mavenLocal()
    ivy {
        url 'https://github.com/'
        layout 'pattern', {
            artifact '/[organisation]/[module]/archive/[revision].[ext]'
        }
    }
    maven {
        name 'ProfMobius Repo'
        url "http://mobiusstrip.eu/maven/"
   }
}

configurations {
    api
    apiCompile
}

dependencies {
    apiCompile "CoFH:RedstoneFlux-API:${rf_api_version}@zip"
    compile "mcp.mobius.waila:Waila:${waila_version}_1.9.4:dev"
}

// Artifacts
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}
tasks.assemble.dependsOn('deobfJar', 'sourceJar')


// Maven publishing
publishing {
    publications {
        universal(MavenPublication) {
            from components.java
            artifact deobfJar
            artifact sourceJar
        }
    }
}


// API extracting
sourceSets {
    api {
        java {
            srcDirs += "src/api/java"
        }
    }
    apiCompile {
        java {
            srcDirs += "src/apiCompile/java"
        }
    }
    main {
        java {
            srcDirs += "src/apiCompile/java"
        }
    }
}

task extractAPI(dependsOn: configurations.api) << {
    copy {
        delete "src/api"
        delete "$buildDir/apiExtract"

        from configurations.api.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        into "$buildDir/apiExtract"
    }
    
    configurations.api.resolvedConfiguration.resolvedArtifacts.each {
        def name = it.name + "_api"
        if (project.properties.containsKey(name)) {
            copy {
                from "$buildDir/apiExtract/" + project[name]
                into "src/api/java"
            }
        }
    }
    delete "$buildDir/apiExtract"
}

task extractAPICompile(dependsOn: configurations.apiCompile) << {
    copy {
        delete "src/apiCompile"
        delete "$buildDir/apiCompileExtract"

        from configurations.apiCompile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        into "$buildDir/apiCompileExtract"
    }
    
    configurations.apiCompile.resolvedConfiguration.resolvedArtifacts.each {
        def name = it.name + "_apiCompile"
        if (project.properties.containsKey(name)) {
            copy {
                from "$buildDir/apiCompileExtract/" + project[name]
                into "src/apiCompile/java"
            }
        }
    }
    delete "$buildDir/apiCompileExtract"
}

tasks.eclipseClasspath.dependsOn("extractAPI", "extractAPICompile")

// Changelog
plugins.withType(se.bjurr.gitchangelog.plugin.gradle.GitChangelogGradlePlugin.class) {
    task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
        filePath = "CHANGELOG.html"
        untaggedName = "Current release ${project.version}"
        templateContent = file('changelog.mustache').getText('UTF-8')
    }
}

forgeChangelog {
    destination = file("D:/Projets/SCAREXgaming.github.io/changelog-${archivesBaseName}.json")
    homepage = "http://github.com/SCAREXgaming/SCLib/releases"
}


if (file('private.properties').exists()) {
    // Config
    ext.privateConfigFile = file 'private.properties'

    privateConfigFile.withReader {
        def p = new Properties()
        p.load(it)
        project.ext.privateConfig = new ConfigSlurper().parse p
    }


    // Github release
    github {
        owner = 'SCAREXgaming'
        repo = 'SCLib'
        token = privateConfig.github_token
        tagName = version
        assets = [
            "CHANGELOG.html",
            "build/libs/${archivesBaseName}-${version}-sources.jar",
            "build/libs/${archivesBaseName}-${version}-dev.jar",
            "build/libs/${archivesBaseName}-${version}.jar"
        ]
    }
}

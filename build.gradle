buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'co.riiid:gradle-github-plugin:0.4.2'
    }
}

plugins {
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.32"
}

apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'co.riiid.gradle'

group = "com.github.SCAREXgaming"
archivesBaseName = "SCLib"

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "eclipse"
    
    project.ext.getProperties().each { k, v ->
        replace "@${k.toUpperCase()}@", v
    }
    
    replace "@DEBUG@", "couscous"
    replaceIn "SCLib.java"
}

sourceSets {
    test {
        java {
            srcDirs += "src/test/java"
        }
    }
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


// Dependencies
repositories {
    mavenCentral()
    maven {
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name 'ProfMobius Repo'
        url "http://mobiusstrip.eu/maven/"
    }
    ivy {
        name "CoFHCore"
        artifactPattern 'http://addons-origin.cursecdn.com/files/2283/118/[module]-[revision].[ext]'
    }
    ivy {
        name "Mekanism"
        artifactPattern "http://aidancbrady.com/wp-content/uploads/mekanism/${mekanism_version_revision}-recommended/[module]-[revision](-[classifier])(.[ext])"
    }
}

configurations {
    api
    optionalCompile
    compile.extendsFrom(optionalCompile)
}

dependencies {
    optionalCompile "codechicken:CodeChickenCore:${mc_version}-${ccc_version}:dev"
    optionalCompile "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:dev"
    optionalCompile "codechicken:NotEnoughItems:${mc_version}-${nei_version}:dev"
    optionalCompile "codechicken:ForgeMultipart:${mc_version}-${fmp_version}:dev"
    optionalCompile "mcp.mobius.waila:Waila:${waila_version}_${mc_version}"
    optionalCompile "cofh:CoFHCore:[${mc_version}]${cofhcore_version}"
    optionalCompile "aidancbrady:Mekanism:${mc_version}-${mekanism_version}.${mekanism_version_revision}"
}


// API extracting
sourceSets {
    api {
        java {
            srcDirs += "src/api/java"
        }
    }
}

task extractAPIs(type: Copy) {
    outputs.upToDateWhen { false }
    delete "src/api"
    from configurations.api.collect {
        it.isDirectory() ? it : zipTree(it)
    }
    into "src/api/java"
}
tasks.eclipseClasspath.dependsOn "extractAPIs"


// Changelog
plugins.withType(se.bjurr.gitchangelog.plugin.gradle.GitChangelogGradlePlugin.class) {
    task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
        filePath = "CHANGELOG.html"
        untaggedName = "Current release ${project.version}"
        templateContent = file('changelog.mustache').getText('UTF-8')
    }
}

// Artifacts
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}

tasks.assemble.dependsOn('deobfJar', 'sourceJar')


if (file('private.properties').exists()) {
    // Config
    ext.privateConfigFile = file 'private.properties'

    privateConfigFile.withReader {
        def p = new Properties()
        p.load(it)
        project.ext.privateConfig = new ConfigSlurper().parse p
    }


    // Github release
    github {
        owner = 'SCAREXgaming'
        repo = 'SCLib'
        token = privateConfig.github_token
        tagName = version
        assets = [
            "CHANGELOG.html",
            "build/libs/${archivesBaseName}-${version}-sources.jar",
            "build/libs/${archivesBaseName}-${version}-dev.jar",
            "build/libs/${archivesBaseName}-${version}.jar"
        ]
    }
}


// Maven publishing
publishing {
    publications {
        universal(MavenPublication) {
            from components.java
            artifact deobfJar
            artifact sourceJar
            
            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    def found = false
                    configurations.optionalCompile.getDependencies().each { confDep ->
                        if (dep.groupId.text().equals(confDep.getGroup()) && dep.artifactId.text().equals(confDep.getName())) {
                            dep.appendNode('optional', true)
                            found = true
                            return
                        }
                    }
                    if (found) {
                        return
                    }
                }
            }
        }
    }
}

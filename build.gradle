buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'co.riiid:gradle-github-plugin:0.4.2'
    }
}

plugins {
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.32"
    id "fr.scarex.fcgp" version "1.0.2"
}

apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'co.riiid.gradle'

group = "com.github.SCAREXgaming"
archivesBaseName = "SCLib"
version = "${mc_version}-${mod_version}"

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "eclipse"
    
    project.ext.getProperties().each { k, v ->
        replace "@${k.toUpperCase()}@", v
    }
    
    replace "@DEBUG@", "couscous"
    replaceIn "SCLib.java"
}

sourceSets {
    test {
        java {
            srcDirs += "src/test/java"
        }
    }
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


// Dependencies
repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name 'ProfMobius Repo'
        url "http://mobiusstrip.eu/maven/"
    }
    ivy {
        name "CoFHCore"
        artifactPattern 'http://addons-origin.cursecdn.com/files/2283/118/[module]-[revision](-[classifier])(.[ext])'
    }
    ivy {
        name "ThermalFoundation"
        artifactPattern 'http://addons-origin.cursecdn.com/files/2300/429/[module]-[revision](-[classifier])(.[ext])'
    }
    ivy {
        name "ThermalExpansion"
        artifactPattern 'http://addons-origin.cursecdn.com/files/2282/512/[module]-[revision](-[classifier])(.[ext])'
    }
    ivy {
        name "ThermalDynamics"
        artifactPattern 'http://addons-origin.cursecdn.com/files/2300/431/[module]-[revision](-[classifier])(.[ext])'
    }
    ivy {
        name "Mekanism"
        artifactPattern "http://aidancbrady.com/wp-content/uploads/mekanism/${mekanism_version_revision}-recommended/[module]-[revision](-[classifier])(.[ext])"
    }
}

configurations {
    api
    sourceCompile
    compile.extendsFrom(sourceCompile)
    optionalCompile
    sourceCompile.extendsFrom(optionalCompile)
    srcCompiled
}

dependencies {
    optionalCompile "codechicken:CodeChickenCore:${mc_version}-${ccc_version}:dev"
    optionalCompile "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:dev"
    optionalCompile "codechicken:NotEnoughItems:${mc_version}-${nei_version}:dev"
    optionalCompile "mcp.mobius.waila:Waila:${waila_version}_${mc_version}"
    optionalCompile "codechicken:ForgeMultipart:${mc_version}-${fmp_version}:dev"
    optionalCompile "cofh:CoFHCore:[${mc_version}]${cofhcore_version}"
    optionalCompile "cofh:ThermalFoundation:[${mc_version}]${tf_version}"
    optionalCompile "cofh:ThermalExpansion:[${mc_version}]${te_version}"
    optionalCompile "cofh:ThermalDynamics:[${mc_version}]${td_version}"
    api "aidancbrady:MDK:${mc_version}-${mekanism_version}.${mekanism_version_revision}@zip"
    optionalCompile "aidancbrady:Mekanism:${mc_version}-${mekanism_version}.${mekanism_version_revision}"
}


// API extracting
sourceSets {
    api {
        java {
            srcDirs += "src/api/java"
        }
    }
}

task extractAPIs(type: Sync) {
    outputs.upToDateWhen { false }
    delete "src/api"
    from configurations.api.collect {
        it.isDirectory() ? it : zipTree(it)
    }
    into "src/api/java"
}
tasks.eclipseClasspath.dependsOn "extractAPIs"

// Generating sources
task generateSources {
    configurations.sourceCompile.getAllDependencies().each {
        dependencies.srcCompiled group: it.getGroup(), name: it.getName(), version: it.getVersion(), ext: 'jar', classifier: 'src'
    }
}

eclipse.classpath.minusConfigurations += [ configurations.srcCompiled ]
eclipse.classpath.file {
    withXml {
        def rootNode = it.asNode()
        rootNode.each { node ->
            if (node.attribute('kind') == 'lib' && node.attribute('sourcepath') == null && configurations.sourceCompile.contains(file(node.attribute('path')))) {
                configurations.sourceCompile.resolvedConfiguration.resolvedArtifacts.each { ra ->
                    def found = false
                    if (ra.getFile().equals(file(node.attribute('path')))) {
                        configurations.srcCompiled.resolvedConfiguration.resolvedArtifacts.each {
                            try {
                                it.file
                            } catch (e) {
                                return
                            }
                            if(it.getModuleVersion().getId() == ra.getModuleVersion().getId()) {
                                node.@sourcepath = it.file.getAbsolutePath()
                                found = true
                                return
                            }
                        }
                    }
                    if (found) {
                        return
                    }
                }
            }
        }
    }
}
tasks.eclipseClasspath.dependsOn 'generateSources'

// Changelog
plugins.withType(se.bjurr.gitchangelog.plugin.gradle.GitChangelogGradlePlugin.class) {
    task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
        filePath = "CHANGELOG.html"
        untaggedName = "Current release ${project.version}"
        templateContent = file('changelog.mustache').getText('UTF-8')
    }
}

forgeChangelog {
    destination = file("D:/Projets/SCAREXgaming.github.io/changelog-${archivesBaseName}.json")
    homepage = "http://github.com/SCAREXgaming/SCLib/releases"
}

// Artifacts
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}

tasks.assemble.dependsOn('deobfJar', 'sourceJar')


if (file('private.properties').exists()) {
    // Config
    ext.privateConfigFile = file 'private.properties'

    privateConfigFile.withReader {
        def p = new Properties()
        p.load(it)
        project.ext.privateConfig = new ConfigSlurper().parse p
    }


    // Github release
    github {
        owner = 'SCAREXgaming'
        repo = 'SCLib'
        token = privateConfig.github_token
        tagName = version
        assets = [
            "CHANGELOG.html",
            "build/libs/${archivesBaseName}-${version}-sources.jar",
            "build/libs/${archivesBaseName}-${version}-dev.jar",
            "build/libs/${archivesBaseName}-${version}.jar"
        ]
    }
}


// Maven publishing
publishing {
    publications {
        universal(MavenPublication) {
            from components.java
            artifact deobfJar
            artifact sourceJar
        }
    }
}

def optDependencies = configurations.optionalCompile.getDependencies()
def allDep = configurations.compile.allDependencies
install {
    repositories.mavenInstaller {
        pom.whenConfigured { pom ->
            pom.withXml {
                def depsNode = asNode().appendNode('dependencies')
                allDep.each {
                    if (it.name != null && it.version != null) {
                        def depNode = depsNode.appendNode('dependency')
                        depNode.appendNode('groupId', it.group)
                        depNode.appendNode('artifactId', it.name)
                        depNode.appendNode('version', it.version)
                        depNode.appendNode('scope', 'compile')
                        if (optDependencies.contains(it)) {
                            depNode.appendNode('optional', true)
                        }
                    }
                }
            }
        }
    }
}
